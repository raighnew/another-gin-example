// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/course.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	model "course-sign-up/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCourseService is a mock of CourseService interface.
type MockCourseService struct {
	ctrl     *gomock.Controller
	recorder *MockCourseServiceMockRecorder
}

// MockCourseServiceMockRecorder is the mock recorder for MockCourseService.
type MockCourseServiceMockRecorder struct {
	mock *MockCourseService
}

// NewMockCourseService creates a new mock instance.
func NewMockCourseService(ctrl *gomock.Controller) *MockCourseService {
	mock := &MockCourseService{ctrl: ctrl}
	mock.recorder = &MockCourseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseService) EXPECT() *MockCourseServiceMockRecorder {
	return m.recorder
}

// DeleteSignedUpCourse mocks base method.
func (m *MockCourseService) DeleteSignedUpCourse(ctx context.Context, studentEmail, courseId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSignedUpCourse", ctx, studentEmail, courseId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSignedUpCourse indicates an expected call of DeleteSignedUpCourse.
func (mr *MockCourseServiceMockRecorder) DeleteSignedUpCourse(ctx, studentEmail, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSignedUpCourse", reflect.TypeOf((*MockCourseService)(nil).DeleteSignedUpCourse), ctx, studentEmail, courseId)
}

// GetCourseClassmates mocks base method.
func (m *MockCourseService) GetCourseClassmates(ctx context.Context, studentEmail, courseId string) ([]*model.Enrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseClassmates", ctx, studentEmail, courseId)
	ret0, _ := ret[0].([]*model.Enrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseClassmates indicates an expected call of GetCourseClassmates.
func (mr *MockCourseServiceMockRecorder) GetCourseClassmates(ctx, studentEmail, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseClassmates", reflect.TypeOf((*MockCourseService)(nil).GetCourseClassmates), ctx, studentEmail, courseId)
}

// GetCourseEnrollment mocks base method.
func (m *MockCourseService) GetCourseEnrollment(ctx context.Context, studentEmail, courseId string) (*model.Enrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseEnrollment", ctx, studentEmail, courseId)
	ret0, _ := ret[0].(*model.Enrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseEnrollment indicates an expected call of GetCourseEnrollment.
func (mr *MockCourseServiceMockRecorder) GetCourseEnrollment(ctx, studentEmail, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseEnrollment", reflect.TypeOf((*MockCourseService)(nil).GetCourseEnrollment), ctx, studentEmail, courseId)
}

// GetSignedUpCourses mocks base method.
func (m *MockCourseService) GetSignedUpCourses(ctx context.Context, studentEmail string) ([]*model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignedUpCourses", ctx, studentEmail)
	ret0, _ := ret[0].([]*model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedUpCourses indicates an expected call of GetSignedUpCourses.
func (mr *MockCourseServiceMockRecorder) GetSignedUpCourses(ctx, studentEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignedUpCourses", reflect.TypeOf((*MockCourseService)(nil).GetSignedUpCourses), ctx, studentEmail)
}

// IfCourseExists mocks base method.
func (m *MockCourseService) IfCourseExists(ctx context.Context, courseId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IfCourseExists", ctx, courseId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IfCourseExists indicates an expected call of IfCourseExists.
func (mr *MockCourseServiceMockRecorder) IfCourseExists(ctx, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IfCourseExists", reflect.TypeOf((*MockCourseService)(nil).IfCourseExists), ctx, courseId)
}

// ListCourses mocks base method.
func (m *MockCourseService) ListCourses(ctx context.Context) ([]*model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCourses", ctx)
	ret0, _ := ret[0].([]*model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCourses indicates an expected call of ListCourses.
func (mr *MockCourseServiceMockRecorder) ListCourses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCourses", reflect.TypeOf((*MockCourseService)(nil).ListCourses), ctx)
}

// SignUpCourse mocks base method.
func (m *MockCourseService) SignUpCourse(ctx context.Context, studentEmail, courseId string) (*model.Enrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpCourse", ctx, studentEmail, courseId)
	ret0, _ := ret[0].(*model.Enrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUpCourse indicates an expected call of SignUpCourse.
func (mr *MockCourseServiceMockRecorder) SignUpCourse(ctx, studentEmail, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpCourse", reflect.TypeOf((*MockCourseService)(nil).SignUpCourse), ctx, studentEmail, courseId)
}