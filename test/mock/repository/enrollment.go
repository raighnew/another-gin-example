// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/enrollment.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "course-sign-up/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEnrollmentRepository is a mock of EnrollmentRepository interface.
type MockEnrollmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentRepositoryMockRecorder
}

// MockEnrollmentRepositoryMockRecorder is the mock recorder for MockEnrollmentRepository.
type MockEnrollmentRepositoryMockRecorder struct {
	mock *MockEnrollmentRepository
}

// NewMockEnrollmentRepository creates a new mock instance.
func NewMockEnrollmentRepository(ctrl *gomock.Controller) *MockEnrollmentRepository {
	mock := &MockEnrollmentRepository{ctrl: ctrl}
	mock.recorder = &MockEnrollmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentRepository) EXPECT() *MockEnrollmentRepositoryMockRecorder {
	return m.recorder
}

// CreateEnrollment mocks base method.
func (m *MockEnrollmentRepository) CreateEnrollment(ctx context.Context, studentId, courseId string) (*model.Enrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnrollment", ctx, studentId, courseId)
	ret0, _ := ret[0].(*model.Enrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnrollment indicates an expected call of CreateEnrollment.
func (mr *MockEnrollmentRepositoryMockRecorder) CreateEnrollment(ctx, studentId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnrollment", reflect.TypeOf((*MockEnrollmentRepository)(nil).CreateEnrollment), ctx, studentId, courseId)
}

// DeleteEnrollment mocks base method.
func (m *MockEnrollmentRepository) DeleteEnrollment(ctx context.Context, studentId, courseId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnrollment", ctx, studentId, courseId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnrollment indicates an expected call of DeleteEnrollment.
func (mr *MockEnrollmentRepositoryMockRecorder) DeleteEnrollment(ctx, studentId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnrollment", reflect.TypeOf((*MockEnrollmentRepository)(nil).DeleteEnrollment), ctx, studentId, courseId)
}

// GetCourseClassmates mocks base method.
func (m *MockEnrollmentRepository) GetCourseClassmates(ctx context.Context, studentId, courseId string) ([]*model.Enrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseClassmates", ctx, studentId, courseId)
	ret0, _ := ret[0].([]*model.Enrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseClassmates indicates an expected call of GetCourseClassmates.
func (mr *MockEnrollmentRepositoryMockRecorder) GetCourseClassmates(ctx, studentId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseClassmates", reflect.TypeOf((*MockEnrollmentRepository)(nil).GetCourseClassmates), ctx, studentId, courseId)
}

// GetEnrollment mocks base method.
func (m *MockEnrollmentRepository) GetEnrollment(ctx context.Context, studentId, courseId string) (*model.Enrollment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollment", ctx, studentId, courseId)
	ret0, _ := ret[0].(*model.Enrollment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollment indicates an expected call of GetEnrollment.
func (mr *MockEnrollmentRepositoryMockRecorder) GetEnrollment(ctx, studentId, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollment", reflect.TypeOf((*MockEnrollmentRepository)(nil).GetEnrollment), ctx, studentId, courseId)
}