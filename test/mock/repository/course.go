// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/course.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "course-sign-up/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCourseRepository is a mock of CourseRepository interface.
type MockCourseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCourseRepositoryMockRecorder
}

// MockCourseRepositoryMockRecorder is the mock recorder for MockCourseRepository.
type MockCourseRepositoryMockRecorder struct {
	mock *MockCourseRepository
}

// NewMockCourseRepository creates a new mock instance.
func NewMockCourseRepository(ctrl *gomock.Controller) *MockCourseRepository {
	mock := &MockCourseRepository{ctrl: ctrl}
	mock.recorder = &MockCourseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseRepository) EXPECT() *MockCourseRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockCourseRepository) Exists(ctx context.Context, courseID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, courseID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockCourseRepositoryMockRecorder) Exists(ctx, courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockCourseRepository)(nil).Exists), ctx, courseID)
}

// List mocks base method.
func (m *MockCourseRepository) List(ctx context.Context) ([]*model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCourseRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCourseRepository)(nil).List), ctx)
}

// ListSignedUpCourses mocks base method.
func (m *MockCourseRepository) ListSignedUpCourses(ctx context.Context, studentEmail string) ([]*model.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSignedUpCourses", ctx, studentEmail)
	ret0, _ := ret[0].([]*model.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSignedUpCourses indicates an expected call of ListSignedUpCourses.
func (mr *MockCourseRepositoryMockRecorder) ListSignedUpCourses(ctx, studentEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSignedUpCourses", reflect.TypeOf((*MockCourseRepository)(nil).ListSignedUpCourses), ctx, studentEmail)
}